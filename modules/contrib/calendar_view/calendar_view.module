<?php

/**
 * @file
 * Contains calendar_view.module.
 */

use Drupal\calendar_view\Plugin\views\style\CalendarViewInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;

/**
 * Implements hook_theme().
 */
function calendar_view_theme() {
  return [
    // Provide a default template for Views using Calendar View style.
    'views_view__style__calendar' => [
      'base hook' => 'views_view',
    ],
    // Allow other modules/themes to alter Calendar View table cells.
    'calendar_view_day' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for Calendar views rows templates.
 *
 * Default template: views-view-calendar.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - view: The view object.
 *   - rows: An array of row items. Each row is an array of content.
 *
 * @see template_preprocess_views_view_unformatted()
 */
function template_preprocess_views_view_calendar(array &$variables) {
  // Default implementation to add default attributes on rows.
  template_preprocess_views_view_unformatted($variables);

  $view = $variables['view'];
  if (($style = $view->getStyle()) instanceof CalendarViewInterface) {
    foreach ($style->options as $key => $value) {
      if (strpos($key, 'calendar_') === 0) {
        $variables['options'][str_replace('calendar_', '', $key)] = $value;
      }
    }
  }

  // Exposed calendar render arrays to Twig.
  $variables['calendars'] = $view->calendars;
}

/**
 * Prepares variables for a Calendar day template.
 *
 * Default template: calendar-view-day.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - children: The view results for this day.
 *   - timestamp: The day timestamp.
 *   - date_format
 *   - date_pattern.
 */
function template_preprocess_calendar_view_day(array &$variables) {
  $elements = $variables['elements'];

  $variables['empty'] = empty($elements['#children'] ?? []);
  $variables['count'] = count($elements['#children'] ?? []);

  $variables['date_format'] = $elements['#date_format'] ?? 'custom';
  $variables['date_pattern'] = $elements['#date_pattern'] ?? 'd';
  $variables['timestamp'] = $elements['#timestamp'] ?? NULL;

  // Helpful $content variable for templates.
  foreach (Element::children($elements) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  $variables['rows'] = [];
  foreach ($elements['#children'] ?? [] as $result) {
    $renderable = [];
    $renderable['view'] = $result['#view'];
    $renderable['rows'] = [$result];

    // Fake preprocessing of result rows to mimic Views.
    // See issue: https://www.drupal.org/project/calendar_view/issues/3295385.
    template_preprocess_views_view_unformatted($renderable);

    $values = $result['#calendar_view'] ?? [];

    // Identify multi-day-spanning events.
    $row = reset($renderable['rows']);
    $row['parent'] = $values['parent'] ?? NULL;
    $row['instance'] = $row_instance = $values['instance'] ?? 0;
    $row['instances'] = $row_instance_total = $values['instances'] ?? 0;
    $row['attributes']->setAttribute('data-calendar-view-instance', $row_instance);
    $row['attributes']->setAttribute('data-calendar-view-instances', $row_instance_total);
    $row['attributes']->setAttribute('data-calendar-view-hash', $values['hash'] ?? NULL);

    // Helpful information on hover.
    if ($calendar_field = $values['calendar_field'] ?? NULL) {
      $row['attributes']->setAttribute('title', $calendar_field->label());
    }

    $row_instance_classes = [];
    if ($row_instance_total > 0) {
      $row_instance_classes[] = 'is-multi';
      if ($row_instance === 0) {
        $row_instance_classes[] = 'is-multi--first';
      }
      elseif ($row_instance == $row_instance_total) {
        $row_instance_classes[] = 'is-multi--last';
      }
      else {
        $row_instance_classes[] = 'is-multi--middle';
      }
      $row['attributes']->addClass($row_instance_classes);
    }

    // Update row content.
    $row_timestamp = $values['from'] ?? 0;
    $variables['rows'][$row_timestamp][] = $row;
  }

  // Reorder rows in cell.
  $sort_order_option = $elements['#options']['calendar_sort_order'] ?? 'ASC';
  $sort_order = $sort_order_option == 'ASC' ? SORT_ASC : SORT_DESC;
  $list = &$variables['rows'];
  if (count($list) > 1) {
    array_multisort(array_map(function ($element) {
      return $element[0]['parent'];
    }, $list), $sort_order);
  }
}

/**
 * Prepares variables for calendar navigation templates.
 *
 * Default template: calendar-view-pager.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - parameters: An associative array containing:
 *     - timestamp: the moment selected by user.
 *     - calendars: A list of year/month.
 *     - month_before: month before timestamp.
 *     - month_current: month of the timestamp.
 *     - month_after: month after the timestamp.
 *
 * @todo Add options to set limits in past/future navigation.
 */
function template_preprocess_calendar_view_pager(array &$variables) {
  $parameters = $variables['parameters'] ?? [];
  $view = $variables['view'] ?? NULL;
  $route_name = !$view || !empty($view->live_preview) ? '<current>' : '<none>';

  $date_formatter = \Drupal::service('date.formatter');
  $date_format = $parameters['date_format'] ?? 'custom';
  $date_pattern = $parameters['date_pattern'] ?? 'F';

  $previous_label = $date_formatter->format($parameters['previous'], $date_format, $date_pattern);
  $current_label = $date_formatter->format($parameters['current'], $date_format, $date_pattern);
  $next_label = $date_formatter->format($parameters['next'], $date_format, $date_pattern);

  if ($parameters['use_previous_next'] ?? FALSE) {
    $previous_label = t('Previous');
    $current_label = t('Now');
    $next_label = t('Next');
  }

  // Build navigation.
  $variables['items'] = [];

  $variables['items']['previous'] = [
    '#type' => 'link',
    '#title' => $previous_label,
    '#url' => Url::fromRoute($route_name, [], [
      'query' => ['calendar_timestamp' => $parameters['previous']] + $parameters,
    ]),
    '#attributes' => [
      'aria-label' => t('Previous month, @date', [
        '@date' => $date_formatter->format(
          $parameters['previous'],
          'custom',
          'F Y'
        ),
      ]),
    ],
    // @todo limit in past?
    '#access' => TRUE,
  ];

  $variables['items']['current'] = [
    '#type' => 'item',
    '#markup' => $current_label,
    '#attributes' => [
      'aria-label' => t('Current month, @date', [
        '@date' => $date_formatter->format(
          $parameters['current'],
          'custom',
          'F Y'
        ),
      ]),
    ],
  ];

  // Reset button.
  if ($parameters['display_reset'] ?? FALSE) {
    $date_time_now = new \DateTime();
    $date_time_now->setTimestamp(time());
    $now = strtotime($date_time_now->format('Y-m-01'));
    if ($now !== (int) $parameters['current']) {
      $variables['items']['reset'] = [
        '#type' => 'link',
        '#title' => t('Today'),
        '#url' => Url::fromRoute($route_name, [], [
          'query' => ['calendar_timestamp' => $now] + $parameters,
        ]),
        '#attributes' => [
          'title' => t('Back to @today', [
            '@today' => $date_formatter->format($now, $date_format, $date_pattern),
          ]),
          'aria-label' => t('Back to @today', [
            '@today' => $date_formatter->format(
              $now,
              'custom',
              'F Y'
            ),
          ]),
          'class' => ['pager__reset'],
        ],
      ];
    }
  }

  $variables['items']['next'] = [
    '#type' => 'link',
    '#title' => $next_label,
    '#url' => Url::fromRoute($route_name, [], [
      'query' => ['calendar_timestamp' => $parameters['next']] + $parameters,
    ]),
    '#attributes' => [
      'aria-label' => t('Next month, @date', [
        '@date' => $date_formatter->format(
          $parameters['next'],
          'custom',
          'F Y'
        ),
      ]),
    ],
    // @todo limit in future?
    '#access' => TRUE,
  ];

  // Month navigation varies depending on the user selection.
  $variables['#cache']['contexts'][] = 'url.query_args:calendar_timestamp';
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function calendar_view_theme_suggestions_views_view_alter(&$suggestions, array $variables) {
  $view = $variables['view'];
  if (($style = $view->getStyle()) instanceof CalendarViewInterface) {
    // Custom template for Views using Calendar style for easier theming.
    // Useful when you want to place the pager somewhere else for instance.
    $suggestions[] = $variables['theme_hook_original'] . '__' . 'style' . '__' . 'calendar';
    $suggestions[] = $variables['theme_hook_original'] . '__' . 'style' . '__' . $style->getPluginId();
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function calendar_view_theme_suggestions_calendar_view_day_alter(&$suggestions, array $variables) {
  $elements = $variables['elements'] ?? [];
  if ($empty = empty($elements['#children'] ?? [])) {
    $suggestions[] = 'calendar_view_day__empty';
  }
  if ($view = $elements['#view'] ?? NULL) {
    $suggestions[] = 'calendar_view_day__' . $view->id();
    $suggestions[] = 'calendar_view_day__' . $view->id() . '__' . $view->current_display;
    if ($empty) {
      $suggestions[] = 'calendar_view_day__empty__' . $view->id();
      $suggestions[] = 'calendar_view_day__empty__' . $view->id() . '__' . $view->current_display;
    }
  }

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function calendar_view_theme_suggestions_calendar_view_pager_alter(&$suggestions, array $variables) {
  if ($view = $variables['view'] ?? NULL) {
    $suggestions[] = 'calendar_view_pager__' . $view->id();
    $suggestions[] = 'calendar_view_pager__' . $view->id() . '__' . $view->current_display;
  }
  return $suggestions;
}

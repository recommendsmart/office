<?php

/**
 * @file
 * Contains calendar_view.module.
 */

use Drupal\calendar_view\Plugin\views\style\Calendar as CalendarStyle;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;

/**
 * Implements hook_theme().
 */
function calendar_view_theme() {
  return [
    'calendar_view_day' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for a Calendar day template.
 *
 * Default template: calendar-view-day.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - children: The view results for this day.
 *   - timestamp: The day timestamp.
 *   - date_format
 *   - date_pattern.
 */
function template_preprocess_calendar_view_day(array &$variables) {
  $elements = $variables['elements'];

  $variables['empty'] = empty($elements['#children'] ?? []);
  $variables['count'] = count($elements['#children'] ?? []);

  $variables['date_format'] = $elements['#date_format'] ?? 'custom';
  $variables['date_pattern'] = $elements['#date_pattern'] ?? 'd';
  $variables['timestamp'] = $elements['#timestamp'] ?? NULL;

  // Expose day start/end hours.
  $options = $elements['#options'] ?? [];
  $display_hours = $options['calendar_display_hours'] ?? FALSE;
  $variables['hours']['display'] = $display_hours;
  $variables['hours']['start'] = $options['calendar_day_hours_start'] ?? 0;
  $variables['hours']['end'] = $options['calendar_day_hours_end'] ?? 24;

  // Always hide hours if month calendar display.
  if (($options['calendar_display'] ?? NULL) == 'month') {
    $variables['hours']['display'] = FALSE;
  }

  // Helpful $content variable for templates.
  foreach (Element::children($elements) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  $variables['rows'] = [];
  foreach ($elements['#children'] ?? [] as $result) {
    // Get values prepared in Calendar style plugin.
    // @see \Drupal\calendar_view\Plugin\views/style\Calendar::processResults();
    $values = $result['#calendar_view'] ?? [];
    $row_timestamp = $values['from'] ?? 0;
    $row_hour_start = strtotime(date('Y-m-d H:00:00', _calendar_view_convert_to_timestamp($row_timestamp)));

    // Fake preprocessing result as if it were a default row.
    // See issue: https://www.drupal.org/project/calendar_view/issues/3295385.
    $renderable = [];
    $renderable['view'] = $result['#view'];
    $renderable['rows'] = [$result];
    template_preprocess_views_view_unformatted($renderable);

    $variables['rows'][$row_hour_start][] = reset($renderable['rows']);
  }
}

/**
 * Prepares variables for Calendar views rows templates.
 *
 * Default template: views-view-calendar.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - view: The view object.
 *   - rows: An array of row items. Each row is an array of content.
 *
 * @see template_preprocess_views_view_unformatted()
 */
function template_preprocess_views_view_calendar(array &$variables) {
  // Default implementation to add default attributes on rows.
  template_preprocess_views_view_unformatted($variables);

  $view = $variables['view'];
  if (($style = $view->getStyle()) instanceof CalendarStyle) {
    foreach ($style->options as $key => $value) {
      if (strpos($key, 'calendar_') === 0) {
        $variables['options'][str_replace('calendar_', '', $key)] = $value;
      }
    }
  }

  // Exposed calendar render arrays to Twig.
  $variables['calendar'] = $view->calendars;
}

/**
 * Prepares variables for calendar navigation templates.
 *
 * Default template: calendar-view-pager.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - parameters: An associative array containing:
 *     - timestamp: the moment selected by user.
 *     - calendars: A list of year/month.
 *     - month_before: month before timestamp.
 *     - month_current: month of the timestamp.
 *     - month_after: month after the timestamp.
 *
 * @todo Add options to set limits in past/future navigation.
 */
function template_preprocess_calendar_view_pager(array &$variables) {
  $parameters = $variables['parameters'] ?? [];
  $view = $variables['view'] ?? NULL;
  $route_name = !$view || !empty($view->live_preview) ? '<current>' : '<none>';

  $date_formatter = \Drupal::service('date.formatter');
  $date_format = $parameters['date_format'] ?? 'custom';
  $date_pattern = $parameters['date_pattern'] ?? 'F';

  // Build navigation.
  $variables['items'] = [];

  $variables['items']['previous'] = [
    '#type' => 'link',
    '#title' => $date_formatter->format($parameters['previous'], $date_format, $date_pattern),
    '#url' => Url::fromRoute($route_name, [], [
      'query' => $parameters + ['calendar_timestamp' => $parameters['previous']],
    ]),
    // @todo limit in past?
    '#access' => TRUE,
  ];
  $variables['items']['current'] = [
    '#type' => 'item',
    '#markup' => $date_formatter->format($parameters['current'], $date_format, $date_pattern),
  ];

  // Reset button.
  if ($parameters['display_reset'] ?? FALSE) {
    $now = time();
    $now_year = date('Y', $now);
    $now_month = date('m');
    $now_start = strtotime("$now_year-$now_month-01");
    if ($now_start !== (int) $parameters['current']) {
      $variables['items']['reset'] = [
        '#type' => 'link',
        '#title' => t('Today'),
        '#url' => Url::fromRoute($route_name, [], [
          'query' => $parameters + ['calendar_timestamp' => $now],
        ]),
        '#attributes' => [
          'title' => t('Back to @today', ['@today' => $date_formatter->format($now, $date_format, $date_pattern)]),
          'class' => ['pager__reset'],
        ],
      ];
    }
  }

  $variables['items']['next'] = [
    '#type' => 'link',
    '#title' => $date_formatter->format($parameters['next'], $date_format, $date_pattern),
    '#url' => Url::fromRoute($route_name, [], [
      'query' => $parameters + ['calendar_timestamp' => $parameters['next']],
    ]),
    // @todo limit in future?
    '#access' => TRUE,
  ];

  // Month navigation varies depending on the user selection.
  $variables['#cache']['contexts'][] = 'url.query_args:calendar_timestamp';
}

/**
 * Implements hook_preprocess_views_view_fields().
 */
function calendar_view_preprocess_views_view_fields(&$variables) {
  $view = $variables['view'];
  if (($style = $view->getStyle()) instanceof CalendarStyle) {
    $filters = $style->getDateFilters();
    foreach ($style->options['calendar_filters'] as $filter_id) {
      if ($filter = $filters[$filter_id] ?? NULL) {
        $field_name = $style->getFilterFieldname($filter);
        if (!isset($variables['fields'][$field_name])) {
          continue;
        }
        $variables['fields'][$field_name]->wrapper_attributes->addClass('calendar-view-filter');
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function calendar_view_theme_suggestions_calendar_view_day_alter(&$suggestions, array $variables) {
  $elements = $variables['elements'] ?? [];
  if ($empty = empty($elements['#children'] ?? [])) {
    $suggestions[] = 'calendar_view_day__empty';
  }
  if ($view = $elements['#view'] ?? NULL) {
    $suggestions[] = 'calendar_view_day__' . $view->id();
    $suggestions[] = 'calendar_view_day__' . $view->id() . '__' . $view->current_display;
    if ($empty) {
      $suggestions[] = 'calendar_view_day__empty__' . $view->id();
      $suggestions[] = 'calendar_view_day__empty__' . $view->id() . '__' . $view->current_display;
    }
  }

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function calendar_view_theme_suggestions_calendar_view_pager_alter(&$suggestions, array $variables) {
  if ($view = $variables['view'] ?? NULL) {
    $suggestions[] = 'calendar_view_pager__' . $view->id();
    $suggestions[] = 'calendar_view_pager__' . $view->id() . '__' . $view->current_display;
  }
  return $suggestions;
}

/**
 * Helper method to make sure a timestamp is a timestamp.
 *
 * @param mixed $value
 *   A given value.
 *
 * @return mixed
 *   The timestamp or the original value.
 */
function _calendar_view_convert_to_timestamp(mixed $value) {
  return !ctype_digit(strval($value)) ? strtotime($value) : $value;
}

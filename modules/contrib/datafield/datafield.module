<?php

/**
 * @file
 * Primary module hooks for data Field module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function datafield_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the datafield module.
    case 'help.page.datafield':
      $output = '<h3>' . t('About Module: Multiple Data Field') . '</h3>';
      $output .= '<p>' . t('Multiple Data Field is a Drupal module that allows you to create custom fields with multiple values under the default table form. This module is based on the Triple Field and Paragraphs table modules, but it offers additional features.') . '</p>';
      $output .= '<p>' . t("<b>Please note:</b> all custom fields are not entity fields, so you cannot benefit from field widget, field renderer, or the entity formatter. It's just for the data.") . '</p>';

      $output .= '<h3>' . t('How it Works') . '</h3>';
      $output .= '<p>' . t('To use the Data Field module, follow these steps:') . '</p>';
      $output .= '<ol><li>' . t('Define the storage column machine name with an unlimited value.') . '</li>';
      $output .= '<li>' . t('Define field column settings.') . '</li>';
      $output .= '<li>' . t('Define a field widget for each column.') . '</li>';
      $output .= '<li>' . t('Define a field display for each column.') . '</li></ol>';

      $output .= '<h3>' . t('Supported Storage Types.') . '</h3>';
      $output .= '<p>' . t('Data Field supports various storage types, including:') . '</p>';
      $output .= '<ul><li>' . t('Numeric: Int, float, decimal') . '</li>';
      $output .= '<li>' . t('Text: Varchar, Text, Json') . '</li>';
      $output .= '<li>' . t('Boolean') . '</li>';
      $output .= '<li>' . t('Date iso format: varchar (22)') . '</li>';
      $output .= '<li>' . t('Date mysql format: Date, datetime, time, Year') . '</li>';
      $output .= '<li>' . t('Entity reference: Taxonomy, Node, User') . '</li>';
      $output .= '<li>' . t('File') . '</li></ul>';

      $output .= '<h3>' . t('Supported Widgets.') . '</h3>';
      $output .= '<p>' . t('Data Field supports various widgets, including:') . '</p>';
      $output .= '<ul><li>' . t('Numeric: Textfield, range, number, select list, hidden') . '</li>';
      $output .= '<li>' . t('Text: Textfield, Textarea, Text full html, Json editor, hidden') . '</li>';
      $output .= '<li>' . t('Boolean: Checkbox') . '</li>';
      $output .= '<li>' . t('Date iso format: Date, datetime, month, week, year') . '</li>';
      $output .= '<li>' . t('Date format: Date, datetime, timestamp, time, year') . '</li>';
      $output .= '<li>' . t('Entity reference: List, autocomplete, radiobutton') . '</li>';
      $output .= '<li>' . t('File: File manager') . '</li></ul>';

      $output .= '<h3>' . t('Supported Formatters.') . '</h3>';
      $output .= '<p>' . t('Data Field supports various formatters, including:') . '</p>';
      $output .= '<ul><li>' . t('Table (Bootstrap-table, datatable) with support for field permission for creating and editing on the fly') . '</li>';
      $output .= '<li>' . t('Chart Google chart, Hightchart') . '</li>';
      $output .= '<li>' . t('Unformatted list order') . '</li>';
      $output .= '<li>' . t('Details') . '</li></ul>';

      $output .= '<h3>' . t('Known Issues.') . '</h3>';
      $output .= '<ul><li>' . t('The time of the field date (iso and unix date), which has a widget time, needs to be checked with the time zone. It has not been tested in all cases.') . '</li>';
      $output .= '<li>' . t('Field file may have problems when deleting old files, and an ajax call must be sent to remove the fid in field columns.') . '</li></ul>';

      $output .= '<h3>' . t('In Progress.') . '</h3>';
      $output .= '<p>' . t('Multiple Field is still in development, and the following features are currently in progress:') . '</p>';
      $output .= '<ul><li>' . t('Edit in the field (in display mode).') . '</li>';
      $output .= '<li>' . t('Any help you can give will be greatly appreciated.') . '</li></ul>';

      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function datafield_theme(): array {
  $item = ['render element' => 'elements'];
  return [
    'data_field_item' => $item,
    'data_field_subfield' => $item,
    'data_field_definition_list' => $item,
    'data_field_chart' => [
      'variables' => [
        'id_field_name' => 'data-field-chart',
        'settings' => NULL,
      ],
      'template' => 'data-field-chart',
    ],
  ];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function datafield_form_field_storage_config_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if (($field_config = $form_state->get('field_config')) && $field_config->get('field_type') == 'data_field') {
    array_unshift(
      $form['actions']['submit']['#submit'],
      'Drupal\datafield\Plugin\Field\FieldType\DataField::submitStorageConfigEditForm'
    );
  }
}

/**
 * Prepares variables for data-field-item template.
 */
function template_preprocess_data_field_item(array &$variables): void {
  $variables['settings'] = $variables['elements']['#settings'];
  $variables['field_settings'] = $variables['elements']['#field_settings'];
  $subfields = array_keys($variables["field_settings"]["columns"]);
  foreach ($subfields as $subfield) {
    $variables['item'][$subfield] = $variables['elements']['#item']->$subfield;
    if (!empty($variables["settings"][$subfield]["show_label"])) {
      $variables['item'][$subfield] = [
        '#theme' => 'data_field_subfield',
        '#subfield' => $variables['elements']['#item']->$subfield,
        '#index' => $subfield,
        '#field_name' => $subfield,
        '#label' => $variables['field_settings'][$subfield]["label"] ?? '',
      ];
    }
  }
}

/**
 * Prepares variables for data-field-item template.
 */
function template_preprocess_data_field_subfield(array &$variables): void {
  $variables['index'] = $variables['elements']['#index'] ?? NULL;
  $variables['value'] = $variables['elements']['#subfield'] ?? NULL;
  $variables['label'] = $variables['elements']['#label'] ?? NULL;
}

/**
 * Prepares variables for data-field-definition-list template.
 */
function template_preprocess_data_field_definition_list(array &$variables): void {
  $variables['settings'] = $variables['elements']['#settings'];
  $variables['field_settings'] = $variables['elements']['#field_settings'];
  $subfields = array_keys($variables["field_settings"]["storage"]);
  $variables['items'] = $variables['elements']['#items'];
  foreach ($subfields as $subfield) {
    if (!empty($variables["settings"][$subfield]["show_label"])) {
      $variables['items'][$subfield]["label"] = $variables["field_settings"][$subfield]["label"];
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function datafield_field_storage_config_update(EntityInterface $entity): void {

  /** @var \Drupal\field\Entity\FieldStorageConfig $entity */
  if ($entity->getType() == 'data_field') {
    $settings = $entity->getSettings();
    $original_settings = $entity->original->getSettings();

    $isChanged = FALSE;
    foreach ($settings['columns'] as $storage) {
      $subfield = $storage['name'];
      if (!empty($original_settings['columns'][$subfield]) && $storage['type'] != $original_settings['columns'][$subfield]['type']) {
        $isChanged = TRUE;
        break;
      }
    }
    if ($isChanged) {
      Drupal::messenger()
        ->addWarning(t('Since storage type has been changed you need to verify the configuration of corresponding widget on form display page.'));
    }
  }

}

/**
 * Implements hook_validation_constraint_alter().
 */
function datafield_validation_constraint_alter(array &$definitions): void {
  // This constraint is required to test empty boolean values.
  $definitions['NotEqualTo']['class'] = '\Symfony\Component\Validator\Constraints\NotEqualTo';
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function datafield_theme_suggestions_data_field_item(array $variables): array {
  return [
    'data_field_item__' . $variables['elements']['#field_name'],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 *
 * @todo remove this once the 'data-field-subfield.html.twig' is removed.
 */
function datafield_theme_suggestions_data_field_subfield(array $variables): array {
  return [
    'data_field_subfield__' . $variables['elements']['#field_name'],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function datafield_theme_suggestions_data_field_definition_list(array $variables): array {
  return [
    'data_field_definition_list__' . $variables['elements']['#field_name'],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function datafield_theme_suggestions_item_list_alter(array &$suggestions, array $variables): void {
  $field_name = $variables['context']['data_field']['field_name'] ?? NULL;
  if ($field_name) {
    $suggestions[] = 'item_list__data_field__' . $field_name;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function datafield_theme_suggestions_table_alter(array &$suggestions, array &$variables): void {
  $field_name = $variables['attributes']['data-field--field-name'] ?? NULL;
  if ($field_name) {
    $suggestions[] = 'table__data_field__' . $field_name;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function datafield_theme_suggestions_details_alter(array &$suggestions, array $variables): void {
  $field_name = $variables['element']['#attributes']['data_field--field-name'] ?? NULL;
  if ($field_name) {
    $suggestions[] = 'details__data_field__' . $field_name;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function datafield_preprocess_field_multiple_value_form(&$variables) {
  if (!empty($variables["element"]['#widgetDataFieldTable'])) {
    if (!empty($variables["element"]["add_more"])) {
      $variables["button"] = $variables["element"]["add_more"];
      unset($variables["element"]["add_more"]);
    }
    $variables["table"]["#header"] = $variables["element"]["#header"];
    $variables["table"]["#caption"] = $variables["element"]["#title"];
    $variables["element"]["#title"] = '';
    foreach (Element::children($variables["element"]) as $delta => $element) {
      $variables["table"][$delta] = $variables["element"][$delta];
    }
    unset($variables["table"]["#rows"]);
  }
}

<?php

/**
 * @file
 * Provides a list of often-used values of a field.
 */

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\field_suggestion\Element\FieldSuggestionOperations;
use Drupal\user\EntityOwnerInterface;

/**
 * Implements hook_help().
 */
function field_suggestion_help($route_name, RouteMatchInterface $route_match) {
  $output = '';

  if ($route_name === 'help.page.field_suggestion') {
    $output .= '<h3>' . t('About') . '</h3>';
    $output .= '<p>' . t('Provides a list of often-used values of a field for
selecting one from them to automatically fill the field instead of filling the
field each time manually.') . '</p>';
  }

  return $output;
}

/**
 * Implements hook_field_widget_single_element_form_alter().
 */
function field_suggestion_field_widget_single_element_form_alter(
  array &$element,
  FormStateInterface $form_state,
  array $context
) {
  /** @var \Drupal\Core\Field\FieldItemListInterface $items */
  $items = $context['items'];

  $config = \Drupal::config('field_suggestion.settings');
  $fields = (array) $config->get('fields');

  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
  $entity = $items->getEntity();

  if (!isset($fields[$entity_type_id = $entity->getEntityTypeId()])) {
    return;
  }

  $field_name = $items->getName();

  if (!in_array($field_name, $fields[$entity_type_id])) {
    return;
  }

  $query = \Drupal::entityQueryAggregate($entity_type_id)
    ->addTag('field_suggestion')
    ->addMetaData('field_name', $field_name)
    ->addMetaData('entity', $entity);

  if ($config->get('own')) {
    $entity_type = $entity->getEntityType();

    if (
      is_subclass_of($entity_type->getClass(), EntityOwnerInterface::class) &&
      $entity_type->hasKey('owner')
    ) {
      $query->condition(
        $entity_type->getKey('owner'),
        \Drupal::currentUser()->id()
      );
    }
  }

  /** @var \Drupal\field_suggestion\Service\FieldSuggestionHelperInterface $helper */
  $helper = \Drupal::service('field_suggestion.helper');

  $ignored = $helper->ignored($entity_type_id, $field_name);

  $pinned = [];

  $ids = ($ignored_query = \Drupal::entityQuery('field_suggestion'))
    ->condition(
      $ignored_query->orConditionGroup()
        ->notExists('ignore')
        ->condition('ignore', FALSE)
    )
    ->condition('entity_type', $entity_type_id)
    ->condition('field_name', $field_name)
    ->execute();

  if (!empty($ids)) {
    $storage = \Drupal::entityTypeManager()->getStorage('field_suggestion');

    foreach ($ids as $id) {
      /** @var \Drupal\field_suggestion\FieldSuggestionInterface $suggestion_entity */
      $suggestion_entity = $storage->load($id);

      $allow = TRUE;

      if ($suggestion_entity->hasExcluded()) {
        /** @var \Drupal\field_suggestion\Service\FieldSuggestionPinFilterInterface $filter */
        $filter = \Drupal::service('field_suggestion.filter.pin');

        if ($filter->exclude($suggestion_entity->getExcluded(), $entity)) {
          $allow = FALSE;
        }
      }

      $value = $suggestion_entity->label(TRUE);

      if ($allow && $suggestion_entity->isOnce()) {
        $count = (int) \Drupal::entityQuery($entity_type_id)
          ->addTag('field_suggestion')
          ->addTag('field_suggestion_usage')
          ->addMetaData('field_name', $field_name)
          ->addMetaData('entity', $entity)
          ->condition($field_name, $value)
          ->range(0, 1)
          ->count()
          ->accessCheck()
          ->execute();

        if ($count === 1) {
          $allow = FALSE;
        }
      }

      if ($allow) {
        $pinned[] = $value;
      }
      else {
        $ignored[] = $value;
      }
    }
  }

  $ignored = array_unique(array_merge($ignored, $pinned));

  if (!empty($ignored)) {
    $query->condition($field_name, $ignored, 'NOT IN');
  }

  $values = $query
    ->sortAggregate($field_name, 'COUNT', 'DESC')
    ->groupBy($field_name)
    ->range(0, $config->get('limit'))
    ->execute();

  $values = array_column($values, $field_name);

  if (!empty($pinned)) {
    $values = array_merge($pinned, $values);
  }

  if (count($values) === 0) {
    return;
  }

  if ($config->get('collapsible')) {
    $element['suggestion'] = [
      '#type' => 'dropbutton',
      '#attached' => ['library' => ['field_suggestion/ajax']],
      '#links' => [['title' => t('Suggestions')]],
    ];

    $url = Url::fromRoute('field_suggestion.select')
      ->setRouteParameters([
        'entity_type' => $helper->encode($entity_type_id),
        'field_name' => $field_name,
      ])
      ->setOption('attributes', ['class' => ['use-ajax']]);
  }
  else {
    $element['suggestion'] = [
      '#type' => 'radios',
      '#title' => t('Suggestions'),
      '#ajax' => [
        'wrapper' => 'edit-' . $field_name . '-wrapper',
        'callback' => '_field_suggestion_ajax_callback',
      ],
    ];
  }

  $storage = \Drupal::entityTypeManager()->getStorage($entity_type_id);
  $view_builder = \Drupal::entityTypeManager()->getViewBuilder($entity_type_id);
  $renderer = \Drupal::service('renderer');
  $definition = $items->getFieldDefinition();

  if (is_subclass_of(
    $definition->getClass(),
    EntityReferenceFieldItemListInterface::class
  )) {
    $item_storage = \Drupal::entityTypeManager()->getStorage(
      $definition->getSetting('target_type')
    );
  }

  foreach ($values as $delta => $value) {
    $ids = \Drupal::entityQuery($entity_type_id)
      ->accessCheck()
      ->condition($field_name, $value)
      ->range(0, 1)
      ->execute();

    if (empty($ids)) {
      continue;
    }

    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
    $entity = $storage->load(reset($ids));

    $sub_element = $view_builder->viewFieldItem($entity->$field_name->first());

    if (isset($url)) {
      $element['suggestion']['#links'][] = [
        'title' => $sub_element,
        'url' => (clone $url)->setRouteParameter('delta', $delta),
      ];
    }
    else {
      $element['suggestion']['#options'][] = $renderer->render($sub_element);
    }

    if (isset($item_storage)) {
      $value = $item_storage->load($value)->label() . ' (' . $value . ')';
    }

    $element['suggestion']['#attributes']['data-suggestion-' . $delta] = $value;
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function field_suggestion_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() !== 'field_suggestion') {
    return $fields;
  }

  $items = (array) \Drupal::config('field_suggestion.settings')->get('fields');

  if (empty($items)) {
    return $fields;
  }

  $settings = ['exclude_entity_types' => FALSE];

  foreach (array_keys($items) as $entity_type) {
    $settings['entity_type_ids'][$entity_type] = $entity_type;

    $settings[$entity_type] = [
      'handler' => 'default:' . $entity_type,
      'handler_settings' => [
        'target_bundles' => NULL,
      ],
    ];
  }

  $fields['exclude'] = BaseFieldDefinition::create('dynamic_entity_reference')
    ->setLabel(t('Exclude'))
    ->setDescription(t('Entities list where this suggestion should be hidden
in the suggestions list.'))
    ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
    ->setSettings($settings)
    ->setDisplayOptions('form', ['weight' => 2]);

  return $fields;
}

/**
 * Implements hook_entity_operation().
 */
function field_suggestion_entity_operation(EntityInterface $entity) {
  $operations = [];
  $fields = (array) \Drupal::config('field_suggestion.settings')->get('fields');

  if (empty($fields[$entity_type = $entity->getEntityTypeId()])) {
    return $operations;
  }

  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $manager */
  $manager = \Drupal::service('entity_field.manager');

  /** @var \Drupal\Core\Field\BaseFieldDefinition[] $definitions */
  $definitions = $manager->getBaseFieldDefinitions($entity_type);

  $fields = array_flip($fields[$entity_type]);

  foreach ($definitions as $field => $definition) {
    if (isset($fields[$field])) {
      $fields[$field] = $definition->getType();
    }
  }

  $options = ['query' => \Drupal::destination()->getAsArray()];

  $actions = [
    'pin' => [
      TRUE => t('Unpin'),
      FALSE => t('Pin'),
    ],
    'ignore' => [
      TRUE => t('Include'),
      FALSE => t('Ignore'),
    ],
  ];

  $operations_count = 0;
  $weight = 150;
  $has_suggestions = [];

  /** @var \Drupal\field_suggestion\Service\FieldSuggestionHelperInterface $helper */
  $helper = \Drupal::service('field_suggestion.helper');

  $route_parameters = [
    'entity_type' => $helper->encode($entity_type),
    'entity_id' => $entity->id(),
  ];

  foreach ($fields as $field_name => $field_type) {
    $route_parameters['field_name'] = $field_name;
    $operations_updated = FALSE;
    $property = $definitions[$field_name]->getMainPropertyName() ?? 'value';

    foreach ($actions as $action_type => $action_labels) {
      $url = Url::fromRoute(
        'field_suggestion.operation',
        ['type' => $action_type] + $route_parameters,
        $options
      );

      if (!$url->access()) {
        continue;
      }

      $last_field_name = $field_name;

      if (!$operations_updated) {
        $operations_updated = TRUE;
        $operations_count++;
      }

      $suggestions_count = \Drupal::entityQuery('field_suggestion')
        ->condition('ignore', $action_type === 'ignore')
        ->condition('entity_type', $entity_type)
        ->condition('field_name', $field_name)
        ->condition($helper->field($field_type), $entity->$field_name->$property)
        ->range(0, 1)
        ->count()
        ->accessCheck()
        ->execute();

      $has_suggestions[$action_type] = $suggestions_count > 0;

      $operations['field_suggestion_' . $action_type . '_' . $field_name] = [
        'title' => $action_labels[$has_suggestions[$action_type]] . ' ' . $field_name,
        'url' => $url,
        'weight' => $weight += 10,
      ];
    }
  }

  if (count($fields) === 1 && $operations_count === 1) {
    foreach ($has_suggestions as $action_type => $has_per_action) {
      $key = 'field_suggestion_' . $action_type . '_' . $last_field_name;
      $operations[$key]['title'] = $actions[$action_type][$has_per_action];
    }
  }

  return $operations;
}

/**
 * Implements hook_element_info_alter().
 */
function field_suggestion_element_info_alter(array &$info) {
  $info['operations']['#pre_render'][] = [
    FieldSuggestionOperations::class,
    'preRender',
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function field_suggestion_preprocess_links__help(&$variables) {
  $titles = [
    'entity.field_suggestion.collection' => t('Pinned items'),
    'entity.field_suggestion_type.collection' => t('Supported field types'),
    'field_suggestion.settings' => t('Settings'),
  ];

  foreach ($variables['links'] as &$item) {
    /** @var \Drupal\Core\Url $url */
    $url = $item['link']['#url'];

    if (isset($titles[$route_name = $url->getRouteName()])) {
      $item['link']['#title'] = $titles[$route_name];
    }
  }
}

/**
 * AJAX callback.
 *
 * @param array $form
 *   The form structure.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 *
 * @return \Drupal\Core\Ajax\AjaxResponse
 *   The AJAX response.
 */
function _field_suggestion_ajax_callback(array $form, FormStateInterface $form_state) {
  $name = $form_state->getTriggeringElement()['#parents'][0];
  $attributes = $form[$name]['widget'][0]['suggestion']['#attributes'];
  $delta = $form_state->getValue([$name, 0, 'suggestion']);

  /** @var \Drupal\Core\Entity\ContentEntityFormInterface $form_object */
  $form_object = $form_state->getFormObject();

  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $manager */
  $manager = \Drupal::service('entity_field.manager');

  /** @var \Drupal\Core\Field\BaseFieldDefinition $definition */
  $definition = $manager->getBaseFieldDefinitions(
    $form_object->getEntity()->getEntityTypeId()
  )[$name];

  $property = $definition->getMainPropertyName() ?? 'value';

  return (new AjaxResponse())->addCommand(new InvokeCommand(
    '#edit-' . $name . '-0-' . str_replace('_', '-', $property),
    'val',
    [$attributes['data-suggestion-' . $delta]]
  ));
}

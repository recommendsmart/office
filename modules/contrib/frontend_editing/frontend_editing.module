<?php

/**
 * @file
 * Functions and hooks for the frontend_editing module.
 */

use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityForm;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\RevisionableInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Form\SubformState;
use Drupal\Core\Url;

/**
 * Implements hook_entity_view_alter().
 */
function frontend_editing_entity_view_alter(&$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Don't do this for embedded entities.
  if (isset($build['#embed'])) {
    return;
  }

  $config = \Drupal::configFactory()->get('frontend_editing.settings');
  $cacheable_metadata = new CacheableMetadata();
  $cacheable_metadata->addCacheableDependency($config);
  $supported_entity_types = $config->get('entity_types');
  // If a value is 0 (for disabled) a search will evaluate to TRUE, e.g.
  // "'key' == 0" evaluates to TRUE, therefore we need to perform strict search.
  if (!in_array($entity->getEntityTypeId(), $supported_entity_types, TRUE)) {
    return;
  }

  // Only do this, if user has access to frontend editing.
  $cacheable_metadata->addCacheContexts(['user.permissions']);
  if (!\Drupal::currentUser()->hasPermission('access frontend editing') || ($entity instanceof RevisionableInterface && !$entity->isLatestRevision()) || !$entity->access('update')) {
    return;
  }
  $cacheable_metadata->applyTo($build);
  // Add the editing url as a data attribute.
  $url = Url::fromRoute('frontend_editing.form', [
    'type' => $entity->getEntityTypeId(),
    'id' => $entity->id(),
  ])->toString();

  $build['#attributes']['data-editing-url'] = $url;
  $build['#attributes']['data-sidebar-width'] = $config->get('sidebar_width') ?? 30;
  $build['#attributes']['data-full-width'] = $config->get('full_width') ?? 70;
  $build['#attached']['library'][] = 'frontend_editing/frontend_editing';

}

/**
 * Implements hook_theme().
 */
function frontend_editing_theme($existing, $type, $theme, $path) {
  return [
    'html__frontend_editing' => [
      'template' => 'html--frontend-editing',
      'base hook' => 'html',
    ],
    'page__frontend_editing' => [
      'template' => 'page--frontend-editing',
      'base hook' => 'page',
    ],
  ];
}

/**
 * Implements hook_ajax_render_alter().
 */
function frontend_editing_ajax_render_alter(array &$data) {
  foreach ($data as &$command) {
    if ($command['command'] == 'insert' && $command['method'] == 'prepend') {
      if (strpos($command['data']->__toString(), 'data-drupal-messages')) {
        $command['selector'] = '[data-drupal-messages], [data-drupal-messages-fallback]';
        $command['method'] = 'replaceWith';
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function frontend_editing_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_object = $form_state->getFormObject();
  if ($form_object instanceof EntityForm) {
    $entity = $form_object->getEntity();
    $supported_entity_types = \Drupal::configFactory()
      ->get('frontend_editing.settings')
      ->get('entity_types');
    // If a value is 0 (for disabled) a search will evaluate to TRUE, e.g.
    // "'key' == 0" evaluates to TRUE, therefore we need to perform strict
    // search.
    if (!in_array($entity->getEntityTypeId(), $supported_entity_types, TRUE)) {
      return;
    }
    $form['actions']['submit']['#submit'][] = 'frontend_editing_update_success';
  }
}

/**
 * Sends message that the form was successfully submitted.
 */
function frontend_editing_update_success(array &$form, FormStateInterface $form_state) {
  $form_object = $form_state->getFormObject();
  $entity = $form_object->getEntity();
  \Drupal::messenger()->addStatus(t('%entity_type: @id was successfully updated', [
    '%entity_type' => $entity->getEntityType()->getLabel(),
    '@id' => $entity->id(),
  ]));
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for paragraph_form.
 */
function frontend_editing_form_paragraph_form_alter(&$form, FormStateInterface $form_state) {
  if (!\Drupal::currentUser()->hasPermission('edit behavior plugin settings')) {
    return;
  }

  /** @var \Drupal\Core\Entity\ContentEntityFormInterface $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\paragraphs\ParagraphInterface $paragraphs_entity */
  $paragraphs_entity = $form_object->getEntity();

  // Build the behavior plugins fields, do not display behaviors when
  // translating and untranslatable fields are hidden.
  $paragraphs_type = $paragraphs_entity->getParagraphType();
  if ($paragraphs_type) {
    $form['behavior_plugins']['#tree'] = TRUE;
    $form['behavior_plugins']['#weight'] = -99;
    foreach ($paragraphs_type->getEnabledBehaviorPlugins() as $plugin_id => $plugin) {
      $form['behavior_plugins'][$plugin_id] = [
        '#type' => 'container',
        '#group' => implode('][', array_merge($form['#parents'], ['paragraph_behavior'])),
      ];
      $subform_state = SubformState::createForSubform($form['behavior_plugins'][$plugin_id], $form, $form_state);
      if ($plugin_form = $plugin->buildBehaviorForm($paragraphs_entity, $form['behavior_plugins'][$plugin_id], $subform_state)) {
        $form['behavior_plugins'][$plugin_id] = $plugin_form;
        // Add the paragraphs-behavior class, so that we are able to show
        // and hide behavior fields, depending on the active perspective.
        $form['behavior_plugins'][$plugin_id]['#attributes']['class'][] = 'paragraphs-behavior';
      }
    }

    $form['#validate'][] = 'frontend_editing_form_paragraph_form_validate';
    array_unshift($form['actions']['submit']['#submit'], 'frontend_editing_form_paragraph_form_submit');
  }
}

/**
 * Validation handler for the paragraph entity form.
 *
 * @param array $form
 *   The complete form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The state of the form.
 */
function frontend_editing_form_paragraph_form_validate(array &$form, FormStateInterface $form_state) {
  if (!\Drupal::currentUser()->hasPermission('edit behavior plugin settings')) {
    return;
  }

  /** @var \Drupal\Core\Entity\ContentEntityFormInterface $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\paragraphs\ParagraphInterface $paragraphs_entity */
  $entity = $form_object->getEntity();

  // Validate all enabled behavior plugins.
  $paragraphs_type = $entity->getParagraphType();
  foreach ($paragraphs_type->getEnabledBehaviorPlugins() as $plugin_id => $plugin_values) {
    if (!empty($form['behavior_plugins'][$plugin_id])) {
      $subform_state = SubformState::createForSubform($form['behavior_plugins'][$plugin_id], $form_state->getCompleteForm(), $form_state);
      $plugin_values->validateBehaviorForm($entity, $form['behavior_plugins'][$plugin_id], $subform_state);
    }
  }
}

/**
 * Submit handler for the paragraph entity form.
 *
 * @param array $form
 *   The complete form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The state of the form.
 */
function frontend_editing_form_paragraph_form_submit(array &$form, FormStateInterface $form_state) {
  if (!\Drupal::currentUser()->hasPermission('edit behavior plugin settings')) {
    return;
  }

  /** @var \Drupal\Core\Entity\ContentEntityFormInterface $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\paragraphs\ParagraphInterface $paragraphs_entity */
  $paragraphs_entity = $form_object->getEntity();
  $values = $form_state->getValues();

  if (isset($values['behavior_plugins'])) {
    // Submit all enabled behavior plugins.
    $paragraphs_type = $paragraphs_entity->getParagraphType();
    foreach ($paragraphs_type->getEnabledBehaviorPlugins() as $plugin_id => $plugin_values) {
      if (!isset($values['behavior_plugins'][$plugin_id])) {
        $values['behavior_plugins'][$plugin_id] = [];
      }
      $subform_state = SubformState::createForSubform($form['behavior_plugins'][$plugin_id], $form, $form_state);
      $plugin_values->submitBehaviorForm($paragraphs_entity, $values['behavior_plugins'][$plugin_id], $subform_state);
    }
  }
}

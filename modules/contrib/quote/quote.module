<?php

/**
 * @file
 * Allows users to quote posts or comments.
 */

use Drupal\comment\CommentInterface;
use Drupal\comment\Plugin\Field\FieldType\CommentItemInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;

/**
 * Implements hook_help().
 */
function quote_help(): string {
  return '';
}

/**
 * Implements hook_node_links_alter().
 */
function quote_node_links_alter(array &$links, NodeInterface $entity, array &$context): void {
  $config = \Drupal::config('quote.settings');

  // Get comments field name.
  $comment_field_name = '';
  $comment_fields = \Drupal::service('comment.manager')->getFields('node');
  foreach ($comment_fields as $key => $value) {
    $entity->hasField($key) ? $comment_field_name = $key : '';
  }

  if ($comment_field_name) {
    if (\Drupal::currentUser()->hasPermission('post comments')
      && \Drupal::currentUser()->hasPermission('use quote')
      && in_array($entity->bundle(), array_filter($config->get('quote_allow_types')))
      && $entity->get($comment_field_name)->status == CommentItemInterface::OPEN
      && $context['view_mode'] != 'teaser') {
      _quote_attachments($links);

      if ($config->get('quote_modes_quote_sel')) {
        $link['node-quote-sel'] = [
          'title' => t('quote selected'),
          'url' => Url::fromUserInput('#', ['fragment' => '#']),
          'attributes' => [
            'class' => [
              'node-quote-sel-link',
            ],
          ],
        ];
        $links['node']['#links']['node-quote-sel'] = $link['node-quote-sel'];
      }

      if ($config->get('quote_modes_quote_all')) {
        $link['node-quote-all'] = [
          'title' => t('quote all'),
          'url' => Url::fromUserInput('#', ['fragment' => '#']),
          'attributes' => [
            'class' => [
              'node-quote-all-link',
            ],
          ],
        ];
        $links['node']['#links']['node-quote-all'] = $link['node-quote-all'];
      }
    }
  }
}

/**
 * Implements hook_comment_links_alter().
 */
function quote_comment_links_alter(array &$links, CommentInterface $entity, array &$context): void {
  $config = \Drupal::config('quote.settings');

  if (\Drupal::currentUser()->hasPermission('post comments')
  && \Drupal::currentUser()->hasPermission('use quote')
  && $config->get('quote_allow_comments')
  && in_array($entity->getCommentedEntity()->bundle(), array_filter($config->get('quote_allow_types')))) {
    _quote_attachments($links);
    if ($config->get('quote_modes_quote_sel')) {
      $link['comment-quote-sel'] = [
        'title' => t('quote selected'),
        'url' => Url::fromUserInput('#', ['fragment' => '#']),
        'attributes' => [
          'class' => [
            'comment-quote-sel-link',
          ],
        ],
      ];
      $links['comment']['#links']['comment-quote-sel'] = $link['comment-quote-sel'];
    }

    if ($config->get('quote_modes_quote_all')) {
      $link['comment-quote-all'] = [
        'title' => t('quote all'),
        'url' => Url::fromUserInput('#', ['fragment' => '#']),
        'attributes' => [
          'class' => [
            'comment-quote-all-link',
          ],
        ],
      ];
      $links['comment']['#links']['comment-quote-all'] = $link['comment-quote-all'];
    }

    if ($config->get('quote_modes_quote_reply_all')) {
      $nid = $entity->getCommentedEntityId();
      $cid = $entity->id();
      $comment_field_name = $entity->getFieldName();
      $link['comment-quote-all-reply'] = [
        'title' => t('reply and quote all'),
        'url' => Url::fromUserInput('/comment/reply/node/' . $nid . '/' . $comment_field_name . '/' . $cid),
        'query' => ['comment-quote-all-reply' => $cid],
        'attributes' => [
          'class' => [
            'comment-quote-all-reply-link',
          ],
        ],
      ];
      $links['comment']['#links']['comment-quote-all-reply'] = $link['comment-quote-all-reply'];
    }
  }
}

/**
 * Attaches the quote library and drupalSettings to a render array.
 *
 * @param array $build
 *   Build array.
 */
function _quote_attachments(array &$build): void {
  $build['#attached']['library'][] = 'quote/quote';
  $config = \Drupal::config('quote.settings');
  $build['#attached']['drupalSettings']['quote']['quote_selector'] = $config->get('quote_selector');
  $build['#attached']['drupalSettings']['quote']['quote_limit'] = $config->get('quote_limit');
  $build['#attached']['drupalSettings']['quote']['quote_selector_comment_quote_all'] = $config->get('quote_selector_comment_quote_all');
  $build['#attached']['drupalSettings']['quote']['quote_selector_node_quote_all'] = $config->get('quote_selector_node_quote_all');
  $build['#attached']['drupalSettings']['quote']['quote_ckeditor_support'] = $config->get('quote_ckeditor_support');
  $build['#attached']['drupalSettings']['quote']['quote_html_tags_support'] = $config->get('quote_html_tags_support');
}

/**
 * Implements hook_form_alter().
 */
function quote_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  $get_parameter = \Drupal::requestStack()->getCurrentRequest()->query->get('comment-quote-all-reply');
  if ((strpos($form_id, 'comment_') == 0) && $get_parameter) {
    $comment = \Drupal::entityTypeManager()->getStorage('comment')->load($get_parameter);
    $config = \Drupal::config('quote.settings');
    $limit = $config->get('quote_limit');
    $comment_limit = substr($comment->get('comment_body')->value, 0, $limit);
    $form['comment_body']['widget']['0']['#default_value'] =
      '<blockquote><strong>' . t('@author wrote:', ['@author' => $comment->getAuthorName()]) . '</strong> ' . $comment_limit . '</blockquote><p><br/></p>';
  }
}

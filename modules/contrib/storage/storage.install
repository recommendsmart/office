<?php

/**
 * @file
 * The Storage Entities install file.
 */

/**
 * Conversion of old permission keys into the new ones.
 *
 * Export your configuration after performing this update.
 */
function storage_update_8101(&$sandbox) {
  if (!\Drupal::moduleHandler()->moduleExists('user')) {
    return NULL;
  }

  $mapping = [];
  $storage_types = \Drupal::entityTypeManager()->getStorage('storage_type')->loadMultiple();
  /** @var \Drupal\storage\Entity\StorageTypeInterface $storage_type */
  foreach ($storage_types as $storage_type) {
    $type_id = $storage_type->id();
    $mapping["$type_id create entities"] = "add $type_id storage entities";
    $mapping["$type_id view own unpublished entities"] = "view own unpublished $type_id storage entities";
    $mapping["$type_id edit own entities"] = "edit own $type_id storage entities";
    $mapping["$type_id edit any entities"] = "edit any $type_id storage entities";
    $mapping["$type_id delete own entities"] = "delete own $type_id storage entities";
    $mapping["$type_id delete any entities"] = "delete any $type_id entities";
    $mapping["$type_id view revisions"] = "view $type_id storage revisions";
    $mapping["$type_id revert revisions"] = "revert $type_id storage revisions";
    $mapping["$type_id delete revisions"] = "delete $type_id storage revisions";
  }
  $config_changed = FALSE;
  /** @var \Drupal\user\RoleInterface $role */
  foreach (\Drupal::entityTypeManager()->getStorage('user_role')->loadMultiple() as $role) {
    $permissions_changed = FALSE;
    foreach ($mapping as $old => $new) {
      if (!$role->isAdmin() && $role->hasPermission($old)) {
        $role->revokePermission($old);
        $role->grantPermission($new);
        $permissions_changed = TRUE;
        $config_changed = TRUE;
      }
    }
    if ($permissions_changed) {
      $role->trustData()->save();
    }
  }
  if ($config_changed) {
    return t('Permission conversion completed. Export your configuration to synchronize the applied changes.');
  }
  return t('Update completed, no changes were made.');
}

/**
 * Convert "Delete any %type entities" to "Delete any %type storage entities".
 *
 * The previous update did not convert this permission to the new format.
 * Export your configuration after performing this update.
 */
function storage_update_8102() {
  $config_changed = FALSE;
  /** @var \Drupal\user\RoleInterface $role */
  foreach (\Drupal::entityTypeManager()->getStorage('user_role')->loadMultiple() as $role) {
    $permissions_changed = FALSE;
    foreach (\Drupal::entityTypeManager()->getStorage('storage_type')->loadMultiple() as $storage_type) {
      $type_id = $storage_type->id();
      if (!$role->isAdmin() && $role->hasPermission("delete any $type_id entities")) {
        $role->revokePermission("delete any $type_id entities");
        $role->grantPermission("delete any $type_id storage entities");
        $permissions_changed = TRUE;
        $config_changed = TRUE;
      }
    }
    if ($permissions_changed) {
      $role->trustData()->save();
    }
  }
  if ($config_changed) {
    return t('Permission conversion completed. Export your configuration to synchronize the applied changes.');
  }
  return t('Update completed, no changes were made.');
}

/**
 * Added a new setting for Storage types to optionally have canonical URLs.
 *
 * This update enables canonical URLs for every existing Storage type, as this
 * was the default behavior. Export your configuration after this update.
 */
function storage_update_8103() {
  /** @var \Drupal\storage\Entity\StorageTypeInterface $storage_type */
  foreach (\Drupal::entityTypeManager()->getStorage('storage_type')->loadMultiple() as $storage_type) {
    $storage_type->set('has_canonical', TRUE);
    $storage_type->save();
  }
}

/**
 * Rabbit Hole integration got moved into a sub-module.
 *
 * This installs the sub-module "rh_storage" when Rabbit Hole is installed.
 * Please export your configuration after this update was applied, so that the
 * module will not get uninstalled on the next configuration import.
 */
function storage_update_8104() {
  if (\Drupal::moduleHandler()->moduleExists('rabbit_hole')) {
    \Drupal::service('module_installer')->install(['rh_storage'], FALSE);
  }
}

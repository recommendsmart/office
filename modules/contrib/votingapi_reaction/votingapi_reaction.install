<?php

/**
 * @file
 * Contains voting_reactions.install.
 */

/**
 * Implements hook_install().
 */
function votingapi_reaction_install() {
  $reactions = _votingapi_reaction_get_reactions();
  $vote_type_storage = \Drupal::service('entity_type.manager')
    ->getStorage('vote_type');

  // Create reactions.
  $vote_types = $vote_type_storage->loadMultiple(
    $vote_type_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('id', array_keys($reactions), 'IN')
      ->execute()
  );
  foreach ($reactions as $key => $label) {
    /** @var \Drupal\votingapi\VoteTypeInterface $vote_type */
    $vote_type = empty($vote_types[$key])
      ? $vote_type_storage->create([
        'id' => $key,
        'label' => $label,
        'value_type' => 'points',
        'description' => 'Automatically created reaction',
      ])
      : $vote_types[$key];
    $vote_type->setThirdPartySetting('votingapi_reaction', 'reaction', TRUE);
    $vote_type->setThirdPartySetting('votingapi_reaction', 'icon', '');
    $vote_type->save();
  }
}

/**
 * Implements hook_uninstall().
 */
function votingapi_reaction_uninstall() {
  $reactions = _votingapi_reaction_get_reactions();
  $vote_type_storage = \Drupal::service('entity_type.manager')
    ->getStorage('vote_type');

  // Remove reactions.
  $vote_types = $vote_type_storage->loadMultiple(
    $vote_type_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('id', array_keys($reactions), 'IN')
      ->execute()
  );
  foreach ($vote_types as $vote_type) {
    /** @var \Drupal\votingapi\VoteTypeInterface $vote_type */
    $vote_type->delete();
  }
}

/**
 * Helper function to return default reactions.
 */
function _votingapi_reaction_get_reactions() {
  return [
    "reaction_angry" => "I'm angry",
    "reaction_laughing" => "I'm laughing",
    "reaction_like" => "I like this",
    "reaction_love" => "I love this",
    "reaction_sad" => "I'm sad",
    "reaction_surprised" => "I'm surprised",
  ];
}
